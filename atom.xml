<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[@edjafarov]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://eldar.djafarov.com//"/>
  <updated>2015-07-05T19:50:18.000Z</updated>
  <id>http://eldar.djafarov.com//</id>
  
  <author>
    <name><![CDATA[Eldar Djafarov]]></name>
    <email><![CDATA[djkojb@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[PromisePipe: debugging]]></title>
    <link href="http://eldar.djafarov.com/2015/06/PromisePipe-debugging/"/>
    <id>http://eldar.djafarov.com/2015/06/PromisePipe-debugging/</id>
    <published>2015-06-30T17:04:14.000Z</published>
    <updated>2015-07-05T19:50:18.000Z</updated>
    <content type="html"><![CDATA[<p>While Promises look nice there is one thing I always hated about them. They are awful for debugging and they fail silently if you have a typo in your code. You need to catch the error otherwise you will never know what happened. So in PromisePipes I decided to fix that.</p>
<p>So PromisePipe in debug mode shows unhandled exceptions in console:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Failed inside test</span><br><span class="line"><span class="string">ReferenceError:</span> ff is not defined</span><br><span class="line">Object.test@<span class="regexp">/Users/</span>edjafarov<span class="regexp">/work/</span>PromisePipe<span class="regexp">/tests/</span>PromisePipe.error.spec.<span class="string">js:</span><span class="number">28</span>:<span class="number">16</span></span><br><span class="line">newArgFunc@<span class="regexp">/Users/</span>edjafarov<span class="regexp">/work/</span>PromisePipe<span class="regexp">/src/</span>PromisePipe.<span class="string">js:</span><span class="number">534</span>:<span class="number">26</span></span><br><span class="line">&#123;anonymous&#125;() ($)$$internal$$tryCatch@<span class="regexp">/Users/</span>edjafarov<span class="regexp">/work/</span>PromisePipe<span class="regexp">/node_modules/</span>es6-promise<span class="regexp">/dist/</span>es6-promise.<span class="string">js:</span><span class="number">304</span>:<span class="number">16</span></span><br><span class="line">&#123;anonymous&#125;() ($)$$internal$$invokeCallback@<span class="regexp">/Users/</span>edjafarov<span class="regexp">/work/</span>PromisePipe<span class="regexp">/node_modules/</span>es6-promise<span class="regexp">/dist/</span>es6-promise.<span class="string">js:</span><span class="number">316</span>:<span class="number">17</span></span><br><span class="line">&#123;anonymous&#125;()@<span class="regexp">/Users/</span>edjafarov<span class="regexp">/work/</span>PromisePipe<span class="regexp">/node_modules/</span>es6-promise<span class="regexp">/dist/</span>es6-promise.<span class="string">js:</span><span class="number">874</span>:<span class="number">13</span></span><br><span class="line">&#123;anonymous&#125;() ($)$asap$$flush@<span class="regexp">/Users/</span>edjafarov<span class="regexp">/work/</span>PromisePipe<span class="regexp">/node_modules/</span>es6-promise<span class="regexp">/dist/</span>es6-promise.<span class="string">js:</span><span class="number">111</span>:<span class="number">9</span></span><br><span class="line">process._tickCallback<span class="annotation">@node</span>.<span class="string">js:</span><span class="number">442</span>:<span class="number">13</span></span><br></pre></td></tr></table></figure></p>
<p>It notifies you that things go wrong though it is not that useful for real life debugging.</p>
<p>What is really helping is that PromisePipe wraps each chain function into the wrapper that is recording data/context values that chain is called with. You can track how the data is transformed by each chain. And it works out of the box. Just setup debug mode for PromisePipe like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PromisePipe.setMode(<span class="string">"DEBUG"</span>)</span><br></pre></td></tr></table></figure>
<p>In chrome it looks like this:</p>
<p><img src="../images/promisepipe-debug.gif" alt=""></p>
<h2 id="Whats_next">Whats next</h2><ul>
<li><p>We have the decomposition of all calls of the PromisePipe and transformations during the execution. That allows us to record the log of what happened while reproducing the bug by QA and replay the log later by Developer.</p>
</li>
<li><p>As well we can record session to use it for autogeneration of integration tests.</p>
</li>
<li><p>And we can watch a performance of each chain individually.</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>While Promises look nice there is one thing I always hated about them. They are awful for debugging and they fail silently if you have a ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[PromisePipe: cross process homogenous Promise chains]]></title>
    <link href="http://eldar.djafarov.com/2015/06/PromisePipe-cross-process-homogenous-Promise-chains/"/>
    <id>http://eldar.djafarov.com/2015/06/PromisePipe-cross-process-homogenous-Promise-chains/</id>
    <published>2015-06-17T11:42:39.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>I used to be a backend developer and even earlier I was a frontend developer. I guess I was good backend dev for my frontend colleagues at that time. Since I was thinking about API’s as a consumer of that API.</p>
<p>I wasn’t ever that lucky as a frontend dev. Building API is hard. It usually takes a lot of time and wtf’s to get same vision on how communication with the server should work.  We start with REST API, then everyone has its own vision on what is REST. Each modification of API is a pain and it always take a lot of time and talks to make a change.</p>
<p>Today as frontend developer I usually describe resource calls with Promises. I use promises because I find their chaining API really nice to describe the potentially asynchronous business logic.</p>
<p>It might be that any business logic could be represented as a chain of data transformations. Even saving of data in DB is a transformation of data into item ID.</p>
<p>Lets check following code for a simple frontend business logic built with Promises:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(item)</span><br><span class="line">  .then(validateItem)</span><br><span class="line">  .then(postItem)</span><br><span class="line">  .then(addItem)</span><br><span class="line">  .catch(handleError)</span><br></pre></td></tr></table></figure>
<p><code>postItem</code> here will return a Promise that will be resolved when the server replies.</p>
<p>On server side, we would probably have some express route:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/api/items'</span>,</span><br><span class="line">  validateItemMiddleware,</span><br><span class="line">  saveItemInDBMiddleware,</span><br><span class="line">  returnItemMiddleware)</span><br></pre></td></tr></table></figure>
<p>If Promises would appear earlier, I think nodejs <a href="http://expressjs.com/" target="_blank" rel="external">express</a> would use them instead of middlewares.<br>Built with Promise chains the server will probably look something like:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/api/items'</span>)</span><br><span class="line">  .then(validateItem)</span><br><span class="line">  .then(saveItemInDB)</span><br><span class="line">  .then(returnItem)</span><br></pre></td></tr></table></figure>
<p>Since any Promise could be constructed out of composition of Promises lets imagine for a second that we do not have a frontend and backend - our code will look like:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postItem = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(data)</span><br><span class="line">    .then(validateItem)</span><br><span class="line">    .then(saveItemInDB)</span><br><span class="line">    .then(returnItem)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve(item)</span><br><span class="line">  .then(validateItem)</span><br><span class="line">  .then(postItem)</span><br><span class="line">  .then(addItem)</span><br><span class="line">  .catch(handleError)</span><br></pre></td></tr></table></figure>
<p>Obviously in that case we would need no API at all and we won’t waste time deciding how to name the Url and what method to use right?</p>
<p>And we can go even deeper:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(item)</span><br><span class="line">  .then(validateItem)</span><br><span class="line">  .then(validateItemServer)</span><br><span class="line">  .then(saveItemInDB)</span><br><span class="line">  .then(addItem)</span><br><span class="line">  .catch(handleError)</span><br></pre></td></tr></table></figure>
<p>Of cause, you can’t do it with plain promises - but with <a href="https://github.com/edjafarov/PromisePipe" target="_blank" rel="external">PromisePipe</a> you can.</p>
<p>PromisePipe is a builder for reusable promise chains.<br>It has more control over the execution of chains and can control how to execute each of them.</p>
<p>PromisePipe is a singleton. You build chains of business logic and run the code both on server and client. Chains marked to be executed on the server will be executed on the server only and chains marked to be executed in the client will be executed in the client. You need to implement methods in PromisePipe to pass messages from the client to the server. And it is up to you what transport to use.</p>
<p><img src="/images/PromisePipe.png" alt="PromisePipe"></p>
<p>So you need to write some boilerplate code that would pass messages around between server and client to try it (<a href="https://github.com/edjafarov/PromisePipe/tree/master/example/simple" target="_blank" rel="external">simple example</a>). So far I wrote examples with <a href="http://socket.io/" target="_blank" rel="external">socket.io</a> as a transport but there is no problem to use plain HTTP request or any protocol that can pass messages around.</p>
<p><img src="/images/Ck1tyZ5qA8.gif" alt="simple example"></p>
<p>With PromisePipe our code example would look like:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doOnServer = PromisePipe.in(<span class="string">'server'</span>)</span><br><span class="line"><span class="keyword">var</span> addItemAction = PromisePipe()</span><br><span class="line">  .then(validateItem)</span><br><span class="line">  .then(doOnServer(validateItemServer))</span><br><span class="line">  .then(doOnServer(saveItemInDB))</span><br><span class="line">  .then(addItem)</span><br><span class="line">  .catch(handleError);</span><br><span class="line">addItemAction(item) <span class="comment">// will pass complete chain</span></span><br></pre></td></tr></table></figure>
<p>When execution comes to <code>validateItemServer</code> chain PromisePipe is passing execution to server with execution message and proceeds there. <code>validateItemServer</code> and <code>saveItemInDB</code> are executing on the server side and the message passed back to a client to proceed execution starting with <code>addItem</code>.</p>
<p>PromisePipe allows to extend API with custom methods and you can build expressive DSL that will describe business logic:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doOnServer = PromisePipe.in(<span class="string">'server'</span>)</span><br><span class="line"><span class="keyword">var</span> addItemAction = PromisePipe()</span><br><span class="line">  .validate(<span class="string">'item'</span>)</span><br><span class="line">  .validateServer(<span class="string">'item'</span>)</span><br><span class="line">  .db.save.Item()</span><br><span class="line">  .then(addItem)</span><br><span class="line">  .catch(handleError);</span><br><span class="line">addItemAction(item) <span class="comment">// will pass complete chain</span></span><br></pre></td></tr></table></figure>
<p>For example, here is a <a href="https://github.com/edjafarov/mongo-pipe-api" target="_blank" rel="external">mongodb API</a> for PromisePipe. And here is an example of <a href="https://github.com/edjafarov/PromisePipe/tree/master/example/mongotodo" target="_blank" rel="external">todo-app</a>(<a href="bit.ly/promisepipe-todo">live</a>) which uses this “mongo-pipe-api”. <code>validateServer</code> and “mongo-pipe-api” should be marked as serverside methods. So, they would be executed on the server only.</p>
<p>PromisePipe allows to build business logic out of simple transformation chains which can run in different processes while the logic itself still simple and homogenous.</p>
<p>With PromisePipes you get:</p>
<ul>
<li><p><strong>simplicity</strong></p>
<p>  Build up your logic in a functional manner with simple transformations. Forget about the process to process communication and save time for building business logic.</p>
</li>
<li><p><strong>testability</strong></p>
<p>  Each chain can be tested independently. It is also easy to assemble pieces of logic together and test parts in isolation.</p>
</li>
<li><p><strong>isomorphism</strong></p>
<p>  PromisePipe was created to work in a cross process environment. You will get isomorphic business logic out of the box if you build chains with isomorphism in mind. So if you do not use any env specific API’s in your logic you can run pipe in a single process or expect the chain to work in multiple environments like browser and server.</p>
</li>
<li><p><strong>scalability</strong></p>
<p>  Each chain could be running in a separate process without much effort. That doesn’t mean you have scalability out of the box. But you have a nice way to distribute your load over multiple processes.</p>
</li>
<li><p><strong>frontend guys can build complete business logic</strong></p>
<p>  Chains are easy to compose together. The main idea behind is to allow frontend guys to use simple building blocks to build backend functionality encapsulating complexity inside meaningful business logic chains.</p>
</li>
</ul>
<p><img src="/images/homogenous-code.png" alt="homogenous code"></p>
<p>I believe PromisePipe will help us to push microservice architectures forward. The homogenous business logic allows decoupling of logic from process to process communication. Which makes no difference between code that is running in monolith and miscroservice architecture.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I used to be a backend developer and even earlier I was a frontend developer. I guess I was good backend dev for my frontend colleagues a]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Responsibility is the best Motivation]]></title>
    <link href="http://eldar.djafarov.com/2015/06/Responsibility-is-the-best-Motivation/"/>
    <id>http://eldar.djafarov.com/2015/06/Responsibility-is-the-best-Motivation/</id>
    <published>2015-06-08T08:11:06.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>You probably also hate the M word. So let’s make it this way - we can’t motivate people to build our product, so let’s develop an attachment of those people to our product and they would take care of it as much as we are.</p>
<p>We are spending one-third of our lives doing our jobs. It is natural to care about what you are doing. And it is really important to allow people to care about the whole product. People tend to take some area of ownership where they have best expertise and make it their baby. But doing that they stop caring about a whole product which eventually decreases the Motivation.</p>
<p>I believe that proper distribution of responsibility is a key for a successful attachment of a person to a product. To make it happen:</p>
<ul>
<li><p><strong>responsibility should be shareable</strong></p>
<p>  It is hard to believe but giving out responsibility is really hard. But if you want people to care you should trust them.</p>
</li>
<li><p><strong>taking responsibility should be safe</strong></p>
<p>  One who is taking responsibility should be supported by all other team members. The person should feel that he won’t be blamed if he failed. That whole team will step up to help him fix any problems.</p>
</li>
<li><p><strong>taking responsibility should be broad</strong></p>
<p>  Any member should be able to commit in any part of the business. Including the business part itself. And areas of responsibility should change over time. One should try many roles and take responsibility of multiple aspects of the project.</p>
</li>
<li><p><strong>risks should be minimized with routines and processes (one should feel that they work for him)</strong></p>
<p>  Taking responsibility is also taking a risk and is really stressful. The process should work in the way to minimize risks and stresses over time. Those routines should be meaningful and simple enough to perform. Ideally over time many routines should be automatized.</p>
</li>
</ul>
<p>And the most important thing - <strong>failures should be shared</strong>, passing through hard times is what makes a true attachment and reliance of a team members.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>You probably also hate the M word. So let’s make it this way - we can’t motivate people to build our product, so let’s develop an attachm]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Holy Grail: promise pipes]]></title>
    <link href="http://eldar.djafarov.com/2015/01/the-holy-grail-promise-pipes/"/>
    <id>http://eldar.djafarov.com/2015/01/the-holy-grail-promise-pipes/</id>
    <published>2015-01-27T17:19:35.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>The Holy Grail series of posts is about React based framework (inspired by Flux architecture) for building isomorph applications. This framework is like a puzzle consists of multiple segments that should play well together. Though each segment can be used separately.</p>
<p><a href="https://github.com/edjafarov/PromisePipe" target="_blank" rel="external">PromisePipes</a> are reusable and cutomisable promise chains. They allow to build own business logic promise based DSL like:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doAction = PromisePipe().add(<span class="number">5</span>).multiply(<span class="number">2</span>).pow(<span class="number">10</span>).doSomeBusinessLogic(withArgs).save(<span class="string">'/api/result'</span>).emit(<span class="string">'result:saved'</span>);</span><br><span class="line"></span><br><span class="line">doAction(<span class="number">1</span>); <span class="comment">//((1+5)*2)^10 -&gt; POST /api/result -&gt; 'result:saved'</span></span><br><span class="line">doAction(<span class="number">2</span>); <span class="comment">//((2+5)*2)^10 -&gt; POST /api/result -&gt; 'result:saved'</span></span><br></pre></td></tr></table></figure>
<h2 id="SPA_patterns">SPA patterns</h2><p>There are common patterns for frontend SPA patterns. Most of app work is to:</p>
<ul>
<li>get data from server.</li>
<li>modify data.</li>
<li>render data.</li>
<li>save data to server.</li>
</ul>
<p>Usually when user surfs app pages in your SPA app does <code>GET -&gt; render</code> flow. With PromisePipe that would look like:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PromisePipe()</span><br><span class="line">.get(<span class="string">'/api/data'</span>)</span><br><span class="line">.render(<span class="string">'view_name'</span>)</span><br></pre></td></tr></table></figure>
<p>Where the <code>.get()</code> is a promise that returns the body as a result to next promise in chain.</p>
<p>When user submits form app does <code>(data) -&gt; Validation -&gt; SAVE -&gt; render</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PromisePipe()</span><br><span class="line">.validate(validationScheme) <span class="comment">//validate incoming data, reject if failed</span></span><br><span class="line">.save(<span class="string">'/api/data'</span>) <span class="comment">//save data if validation successfull</span></span><br><span class="line">.catch(handleErrors) <span class="comment">//catch and handle validation or save error</span></span><br><span class="line">.render(<span class="string">'view_name'</span>)</span><br></pre></td></tr></table></figure>
<p>You can mix data from various sources with the PromisePipe:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> renderAuthorByBookId = PromisePipe()</span><br><span class="line">.get(<span class="string">'/api/books/:bookId'</span>, &#123;bookId:<span class="string">'id'</span>&#125;)</span><br><span class="line">.map(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> data.author;</span><br><span class="line">&#125;)</span><br><span class="line">.get(<span class="string">'/api/books/:authorId'</span>, &#123;authorId:<span class="string">'id'</span>&#125;)</span><br><span class="line">.render(<span class="string">'view_name'</span>)</span><br><span class="line"></span><br><span class="line">renderAuthorByBookId(&#123;id: <span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure></p>
<p>You can play around with PromisePipe in this <a href="http://jsfiddle.net/djkojb/dLehre33/" target="_blank" rel="external">fiddle</a>.</p>
<h3 id="Form_validation">Form validation</h3><p>PromisePipe was built to work in single direction dataflow architecture inspired by Flux. The PromisePipe role is to prepare (fetch/save) and manipulate data. These pipes are containers of pure business logic and stores/models are listening for events emitted in the pipes context and fill themselves with the data.</p>
<p>The validation of forms pattern is pretty neat. One of solutions for validation is mixing validation result with the data itself. I feel like this is wrong making the data dirty and flow ambigous. With PromisePipe I am separating the data of error object.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> Emitter();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> saveEventItem = PromisePipe()</span><br><span class="line">.validate(validationScheme)</span><br><span class="line">.post(<span class="string">'/api/events'</span>)</span><br><span class="line">.emit(<span class="string">'events:add'</span>);</span><br><span class="line">.catchAndEmit(<span class="string">'events:add:reject'</span>)</span><br><span class="line"></span><br><span class="line">saveEventItem(formData, context);</span><br></pre></td></tr></table></figure>
<p>On submit the app will call the function passing the form data as a first argument and apps context as second.</p>
<p>The store can hook up the context events and look like:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventsStore</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> form = &#123;</span><br><span class="line">    	data: [],</span><br><span class="line">        errors: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Emitter(&#123;</span><br><span class="line">    	init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      		context.on(<span class="string">'events:add'</span>, addEvent.bind(<span class="keyword">this</span>));</span><br><span class="line">			context.on(<span class="string">'events:add:reject'</span>, updateErrors.bind(<span class="keyword">this</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        	<span class="keyword">return</span> form;</span><br><span class="line">        &#125;,</span><br><span class="line">        updateErrors: <span class="function"><span class="keyword">function</span>(<span class="params">errors</span>)</span>&#123;</span><br><span class="line">        	form.errors = errors;</span><br><span class="line">            <span class="keyword">this</span>.emit(<span class="string">'change'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        addEvent: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        	form.data.push(data);</span><br><span class="line">            <span class="keyword">this</span>.emit(<span class="string">'change'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> eventsForm = eventsStore(context);</span><br><span class="line"></span><br><span class="line">saveEventItem(formData, context);</span><br><span class="line"><span class="comment">// validate -&gt; post -&gt; emit(events:add) -&gt; eventsForm.addEvent -&gt; eventsForm.emit('change')</span></span><br></pre></td></tr></table></figure></p>
<h3 id="isomporph_resources">isomporph resources</h3><p>The <code>.get</code>, <code>.post()</code>, <code>emit</code>, etc methods are not a part of PromisePipe API. But you can extend PromisePipe API. That opens you a possibility to build DSL with <a href="https://github.com/visionmedia/superagent" target="_blank" rel="external">superagent</a> thus making it isomorph.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> resource = <span class="built_in">require</span>(<span class="string">'superagent'</span>);</span><br><span class="line"></span><br><span class="line">PromisePipe.use(<span class="string">'get'</span>, <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">data, context, url, query</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> req = resource.get(prepreUrl.call(context, url));</span><br><span class="line">		<span class="keyword">if</span>(context.request &amp;&amp; context.request.headers)&#123;</span><br><span class="line">			req.set(context.request.headers);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">typeof</span>(query) == <span class="string">'function'</span>) &#123;</span><br><span class="line">			req.query(query.call(context, data));</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span>(query) == <span class="string">'object'</span>)&#123;</span><br><span class="line">			req.query(query);</span><br><span class="line">		&#125;</span><br><span class="line">		req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">			reject(err);</span><br><span class="line">		&#125;)</span><br><span class="line">		req.end(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(res.error) <span class="keyword">return</span> reject(res.error);</span><br><span class="line">			resolve(res.body);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="PromisePipe">PromisePipe</h3><h3 id="install">install</h3><p>npm install promise-stream</p>
<h3 id="extend">extend</h3><p>You can extend <code>PromisePipe</code> API with additional methods. Thus you are able to build your own customized DSL.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> PromisePipe = <span class="built_in">require</span>(<span class="string">'promise-pipe'</span>);</span><br><span class="line"></span><br><span class="line">PromisePipe.use(<span class="string">'log'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, context, name</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(name) &#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(data[name]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> action = PromisePipe().log().log(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line">action(&#123;foo:<span class="string">"baz"</span>, bar:<span class="string">"xyz"</span>&#125;)</span><br><span class="line"><span class="comment">// &#123;foo:"baz", bar:"xyz"&#125; &lt;- log()</span></span><br><span class="line"><span class="comment">// baz &lt;- log('foo')</span></span><br></pre></td></tr></table></figure></p>
<h3 id="API">API</h3><h3 id="PromisePipe-1">PromisePipe</h3><h3 id="PromisePipe-use(name,_handler)">PromisePipe.use(name, handler)</h3><p>Allows to build your own customized DSL. <code>handler</code> is a function with arguments</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">data, context, arg1, ..., argN</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//you can return Promise</span></span><br><span class="line">	<span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line">PromisePipe.use(<span class="string">'custom'</span>, handler);</span><br><span class="line"></span><br><span class="line">PromisePipe().custom(arg1, ..., argN)</span><br></pre></td></tr></table></figure>
<h3 id="Stream">Stream</h3><p>Is a function that returns a promise. First argument is a data, second is a context. While <code>data</code> behaves the same way as in Promises <code>context</code> is passing thorough whole chain of promises.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = PromisePipe()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data, context</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(data, context);</span><br><span class="line">    context.foo = <span class="string">"bar"</span>;</span><br><span class="line">	<span class="keyword">return</span> data + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data, context</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(data, context);</span><br><span class="line">    context.xyz = <span class="string">"baz"</span>;</span><br><span class="line">	<span class="keyword">return</span> data + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data, context</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(data, context);</span><br><span class="line">&#125;)</span><br><span class="line">stream(<span class="number">2</span>, &#123;&#125;);</span><br><span class="line"><span class="comment">//2 &#123;&#125;</span></span><br><span class="line"><span class="comment">//3 &#123;foo:"bar"&#125;</span></span><br><span class="line"><span class="comment">//4 &#123;foo:"bar", xyz:"baz"&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="stream:then">stream:then</h3><p>As in Promises you can pass two functions inside for success and fail.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = PromisePipe()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data, context</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="comment">//Promise.resolve/reject</span></span><br><span class="line">&#125;).then(success, fail)</span><br></pre></td></tr></table></figure>
<h3 id="stream:catch">stream:catch</h3><p>The catch is taking single argument and bahaves same as Promise catch.</p>
<h3 id="stream:join">stream:join</h3><p>You can join PromisePipes if you like.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = PromisePipe()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data, context</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> data + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> stream2 = PromisePipe()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data, context</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> data + <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line">.join(stream)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">stream2(<span class="number">1</span>) <span class="comment">//4</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>The Holy Grail series of posts is about React based framework (inspired by Flux architecture) for building isomorph applications. This fr]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[proper node-webkit desktop notifications]]></title>
    <link href="http://eldar.djafarov.com/2014/09/proper-node-webkit-desktop-notifications/"/>
    <id>http://eldar.djafarov.com/2014/09/proper-node-webkit-desktop-notifications/</id>
    <published>2014-09-16T15:39:41.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>Desktop notifications plays an important role in success of desktop apps since is allowing to bring attention of a user when something is happenning.</p>
<p>So far in node-webkit we have several solutions for desktop notifications.</p>
<p>1) <a href="https://github.com/rogerwang/node-webkit/issues/27" target="_blank" rel="external">HTML5 notifications</a></p>
<ul>
<li><strong>pros:</strong> is a html5 standart, same as in web.</li>
<li><strong>cons:</strong> looks differently in differen OSes, low interaction capabilities, have bugs for node-webkit:)</li>
</ul>
<p>2) <a href="https://github.com/robrighter/nw-desktop-notifications" target="_blank" rel="external">NW Desktop Notifications</a></p>
<ul>
<li><strong>pros:</strong> customizable, same in different OSes.</li>
<li><strong>cons:</strong> no interaction, animations are ugly, API is not a standart.</li>
</ul>
<p>3) <a href="https://github.com/mikaelbr/node-notifier" target="_blank" rel="external">node-notifier</a></p>
<ul>
<li><strong>pros:</strong> you can do it from node, you can use standart OSes notification systems (win8 is coming soon!).</li>
<li><strong>cons:</strong> looks differently in differen OSes, low interaction.</li>
</ul>
<p>All those solutions were not working for me. Thus I had to create another one. Based on same idea as NW Desktop Notifications but implemented a little bit better.</p>
<p><a href="https://github.com/edjafarov/node-webkit-desktop-notification" target="_blank" rel="external">node-webkit-desktop-notifications</a> should become drop-in replacement for HTML5 notifications. So ideally you just use it instead of html5 Notification with some more API around. And if the code is executed in node-webkit context it does all kinds of rich notifications otherwise it degrades to html5.</p>
<p>Additionally to simple notifications you will get ability to build any complex interations inside your notification. Like change layout, buttons, textfields or gestures.</p>
<h3 id="how_to_build_interactive_notifications">how to build interactive notifications</h3><p>The notification itself is a window. Thus it has it’s own context, html and css/javascript. Rich interactions are built on events. You can emit events on the window object inside notification window and catch them on DesktopNotification instance inside your application. So you can build any kind of presentation and keep interaction inside your appcode.</p>
<h3 id="use_it">use it</h3><p>To use the lib in your app you need to take 2 files:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src/desktopNotification<span class="class">.js</span></span><br><span class="line">src/desktopNotification.html</span><br></pre></td></tr></table></figure>
<p>You need to place them in same folder of your app. Load <code>desktopNotification.js</code> to your index.html to use the <code>DesktopNotification</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> notif = <span class="keyword">new</span> DesktopNotification(<span class="string">'Hello'</span>, &#123;body: <span class="string">'World'</span>&#125;);</span><br><span class="line">notif.show();</span><br></pre></td></tr></table></figure>
<p>check other ways to use <code>DesktopNotification</code> in <a href="https://github.com/edjafarov/node-webkit-desktop-notification/blob/master/src/index.html" target="_blank" rel="external">example</a>.</p>
<h3 id="try_live">try live</h3><ul>
<li>Fetch the <a href="https://github.com/edjafarov/node-webkit-desktop-notification" target="_blank" rel="external">repo</a></li>
<li>npm install</li>
<li>npm start</li>
<li>find an app for your OS in build/node-webkit-desktop-notification</li>
<li><a href="http://screencast.com/t/bUxB6vNvW8BN" target="_blank" rel="external">play</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Desktop notifications plays an important role in success of desktop apps since is allowing to bring attention of a user when something is]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[semantic styling]]></title>
    <link href="http://eldar.djafarov.com/2014/07/semantic-styling/"/>
    <id>http://eldar.djafarov.com/2014/07/semantic-styling/</id>
    <published>2014-07-22T05:27:08.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>Driving from <a href="http://odessajs.org.ua/" target="_blank" rel="external">#OdessaJs</a> with <a href="https://twitter.com/listochkin" target="_blank" rel="external">@listochkin</a> we had discussed the future of web development and our perceptions of what makes sense. It was priceless talk. And lot of things were formulated and validated for me. One of concepts popped out is the “semantic styling”.</p>
<p>Not long ago there was a hype around semantic layout. Which is a great concept around giving more sense to layout. But it looks like nobody noticed the next big revolution in styles. The twitter did it. Twitter <a href="http://getbootstrap.com/" target="_blank" rel="external">bootstrap</a> has formulated <strong>smallest footprint of layout + styles</strong> for common design patterns.</p>
<p>So right now everybody agrees that button can be <code>&lt;button&gt;</code> as well as <code>&lt;a&gt;</code> and it should look the same and dropdown will look like:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"dropdown"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"btn btn-default dropdown-toggle"</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"dropdown-menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#1"</span>&gt;</span>Action<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#2"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>and nobody tries to invent something else. Bootstrap made a standart. What we can call “semantic styles”.</p>
<p>What is also great about twitter bootstrap that it is built with less thus you can use parts of it. The variables in bootstrap are mainly colors and you can override them. Thus your css (less) code consists of two parts: the <strong>logic</strong> (the relations between html elements/classes, that describes the footprint) and the <strong>presentation</strong> (that makes the design individualistic - variables that change your colors and paddings)</p>
<p>With TWBS we have a vocabulary of semantic styles that represent commonly used design patterns and we can adjust them to branded design style overriding less variables.</p>
<p>Unlike bootstrap does though I think this vocabulary should be managed in a different way.</p>
<p>Bootstrap has just a lot of files in twitter bootstrap repo. Package managers on other hand  provide better development experience, more abilities to handle dependencies and structure the code. I prefer <a href="https://github.com/component/component" target="_blank" rel="external">components</a> style over <a href="http://bower.io/" target="_blank" rel="external">bower</a> thus I would like and I believe it is possible to handle vocabulary of semantic styles in the same manner. But instead of CommonJs <code>require(&quot;modulename&quot;)</code> being able to (<strong>CommonLess</strong> - why not?) <code>@import &quot;buttons&quot;</code> without putting complete path to the component.</p>
<p>So from a development perspective we will just need to install some “less terms” as a components (example: <code>$ component install twbs/forms twbs/buttons twbs/grid</code>). And then inside my main.less file:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//importing vocabulary</span><br><span class="line">@import "forms"</span><br><span class="line">@import "buttons"</span><br><span class="line">@import "grid"</span><br><span class="line"></span><br><span class="line">//overriding default variables to adjust to branded design.</span><br><span class="line">$brand-success: #AAAAAA;</span><br><span class="line">$brand-default: #BBBBBB;</span><br></pre></td></tr></table></figure>
<p>Almost everything is ready. <strong>CommonLess</strong> thing is not there yet. So far we just need to put complete relative path for less/sass components we use.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Driving from <a href="http://odessajs.org.ua/" target="_blank" rel="external">#OdessaJs</a> with <a href="https://twitter.com/listochkin"]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[node-webkit autoupdate]]></title>
    <link href="http://eldar.djafarov.com/2014/06/node-webkit-autoupdate/"/>
    <id>http://eldar.djafarov.com/2014/06/node-webkit-autoupdate/</id>
    <published>2014-06-10T15:42:59.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/rogerwang/node-webkit" target="_blank" rel="external">Node-webkit</a> allows you to build cross platform desktop application with <a href="https://nodejs.org" target="_blank" rel="external">node</a> and JavaScript. Though building desktop application unlike pure online webapp means you got no control over the code after the app was installed. Thus releases are painful and bugs after the code was released are frustrating.</p>
<p>Right now desktop apps usually update themselves. <a href="https://github.com/rogerwang/node-webkit/issues/233" target="_blank" rel="external">Node-webkit do not have</a> this functionality out of the box. Which is reasonable because such functionality would hardly rely on specific implementation.</p>
<p>So I created <a href="https://github.com/edjafarov/updater" target="_blank" rel="external">webkit-updater</a>. It relies on suggestion that your app will be packaged with <a href="https://www.npmjs.org/package/grunt-node-webkit-builder" target="_blank" rel="external">grunt-node-webkit-builder</a>, compressed with <a href="https://github.com/gruntjs/grunt-contrib-compress" target="_blank" rel="external">grunt-contrib-compress</a> and with windows package unzip.exe will be packaged. Basically the example of packaging app you can find <a href="https://github.com/edjafarov/updater/blob/master/gruntfile.js" target="_blank" rel="external">here</a>.</p>
<p><a href="https://github.com/edjafarov/updater" target="_blank" rel="external">webkit-updater</a> is working/tested under <a href="http://screencast.com/t/OXyC5xoA" target="_blank" rel="external">mac</a>, <a href="http://screencast.com/t/MSTKqVS3" target="_blank" rel="external">win</a> and <a href="http://screencast.com/t/Je2ptbHhP" target="_blank" rel="external">linux</a>(32/64).</p>
<h3 id="how_does_it_work">how does it work</h3><p>It gives you <a href="https://github.com/edjafarov/updater/blob/master/README.md#api" target="_blank" rel="external">api</a> to:</p>
<ol>
<li>Check the manifest for version.</li>
<li>If the version is different from local one download new package to temp.</li>
<li>Unpack the package to temp.</li>
<li>Run new version from temp and exit the process.</li>
<li>The new version from temp will copy itself to original folder.</li>
<li>The new version will run itself from original folder and exit the process.</li>
</ol>
<p>you should build this logic by yourself though. As a reference you can use <a href="https://github.com/edjafarov/updater/blob/master/app/index.html" target="_blank" rel="external">example</a>.</p>
<h3 id="what_are_the_plans">what are the plans</h3><p>There should be bugs, probably. Need to stabilize it and test it extensively in real world app.</p>
<p>It would also be great to have different rates of updates:</p>
<ul>
<li>update assets only without page reload (<em>.</em>.x)</li>
<li>update assets with page reload (<em>.x.</em>)</li>
<li>update assets and node-webkit engine - full cycle (x.<em>.</em>)</li>
</ul>
<p>There is a <a href="https://github.com/rogerwang/node-webkit/wiki/The-solution-of-lacking-libudev.so.0" target="_blank" rel="external">bug</a> for newer versions of linux. Updater should resolve things like that. Also there should be some preInstall and postInstall scripts handling.</p>
<p>You are welcome to <a href="https://github.com/edjafarov/updater" target="_blank" rel="external">use and commit</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/rogerwang/node-webkit" target="_blank" rel="external">Node-webkit</a> allows you to build cross platform desk]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[framework vs microlib architecture]]></title>
    <link href="http://eldar.djafarov.com/2014/05/framework-vs-microlib-architecture/"/>
    <id>http://eldar.djafarov.com/2014/05/framework-vs-microlib-architecture/</id>
    <published>2014-05-24T03:48:44.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>Just  recently seems like I understood why holywars between programmers are happening. During <a href="http://en.wikipedia.org/wiki/Euromaidan" target="_blank" rel="external">revolution</a> I basically saw the same holywar between people that  believe that their truth is the only truth. Why even for smart people from both sides it is hard to negotiate for the same vision? I believe that the reason is that they have different <strong>values</strong>.</p>
<p>We often underestimate how much common values important for us to feel comfortable and productive in a team. We often do not care about having common values while looking for new jobs , we care about salaries more. Agree we make decision of accepting offer based on many factors, shared values as well though we do that unconsciously.</p>
<p>JavaScript community is quite inhomogeneous so you can see all kinds of values there. So far I can distinct two types of people, those who love classical OOP languages with strict and stable structure and patterns and people that love alternative languages that doesn’t have determined patterns and have ‘unexpected’ flexibilities. While talking with first group of people seems like they afraid of chaos and are intolerable for any unpredictability. The second one so bored with structures and solutions that are running away from enterprises like from hell. I know very few people that are ok with both.</p>
<p>So here I am coming to <strong>framework</strong> vs <strong>microlib</strong> architecture discourse. Inside JavaScript community itself we have kind of holywar around this topic. Now I feel it doesn’t make sense to participate in this war since final decision is always based on our values and that means that “common sense” that we are appealing to is quite individual.</p>
<p>PS: Main question in any job interview should be around values, always!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Just  recently seems like I understood why holywars between programmers are happening. During <a href="http://en.wikipedia.org/wiki/Eurom]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angularjs is evil: overengineering hell]]></title>
    <link href="http://eldar.djafarov.com/2014/04/angular-is-evil-overengineering/"/>
    <id>http://eldar.djafarov.com/2014/04/angular-is-evil-overengineering/</id>
    <published>2014-04-28T07:56:09.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>This I hope is the last post about how Angular will bring you to a world of pain.</p>
<ul>
<li><a href="/2014/02/angularjs-is-evil-dependency-injection/">Angularjs is evil: dependency injection</a></li>
<li><a href="/2014/04/angularjs-is-evil-the-scope-horror/">Angularjs is evil: the scope horror</a></li>
<li><a href="/2014/04/angular-is-evil-overengineering/">Angularjs is evil: overengineering hell</a></li>
</ul>
<p>Recently I stumbled on this <a href="http://codeofrob.com/entries/you-have-ruined-javascript.html" target="_blank" rel="external">Angularjs hate article</a> that I am totally alligned with on emotional level. Angular is clearly overengineering. And unlike some may say It is not giving you exclusive scalability.</p>
<p>I would compare Angular to React. I know that those are not comparable. But I believe that React based architecture is something that beats Angular solution in terms of simplicity and scalability.</p>
<p><strong>React vs AngularJS by number of concepts to learn</strong></p>
<ul>
<li>React stack: 4 (everything is a component, some components have state, you may use model instead, Commonjs modules, router).</li>
<li>AngularJS: 7 (modules, router, controllers, directives, scopes, templates, services, filters).</li>
</ul>
<p>There are twice more concepts to learn for Angular than React. Not even saying that React’s concepts are much more simple. For example you have controller and directive with templates that do more or less the same things. With React you have component only as a building block of your application. We all know that simplicity scales better, right?</p>
<p><strong>directive vs component</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Angular</span></span><br><span class="line">App.directive(<span class="string">'myDirective'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    restrict: <span class="string">'E'</span>,</span><br><span class="line">    transclude: <span class="literal">true</span>,</span><br><span class="line">    scope: &#123;</span><br><span class="line">   	  link: <span class="string">'@link'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">'&lt;a href="#/&#123;&#123;link&#125;&#125;" ng-transclude&gt;&lt;/a&gt;'</span>,</span><br><span class="line">    link: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attrs</span>) </span>&#123;</span><br><span class="line">	  <span class="comment">//do stuff with scope</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//usage</span></span><br><span class="line">&lt;myDirective link=<span class="string">'somewhere'</span>&gt;<span class="xml"><span class="tag">&lt;<span class="title">span</span>&gt;</span>GO<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">myDirective</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//React</span></span><br><span class="line"><span class="keyword">var</span> myComponent = React.createClass(&#123;</span><br><span class="line">  componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//do stuff with this.props</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">href</span>=<span class="value">&#123;'#</span>/' + <span class="attribute">this.props.link</span>&#125;&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//usage</span></span><br><span class="line">&lt;myComponent link=<span class="string">'somewhere'</span>&gt;<span class="xml"><span class="tag">&lt;<span class="title">span</span>&gt;</span>GO<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">myComponent</span>&gt;</span></span><br><span class="line">//JSX transformed</span><br><span class="line">myComponent(&#123;link:'somewhere'&#125;, span(null,'GO'));</span></span><br></pre></td></tr></table></figure>
<p>Substantial difference between React and Angular here is that React is Javascript friendly - you just put stuff as props and since components are functions these are passed as function arguments.</p>
<p>Component is a function!</p>
<p><strong>service vs function</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Angular</span></span><br><span class="line">myApp.service(<span class="string">'unicornLauncher'</span>, [<span class="string">"apiToken"</span>, UnicornLauncher]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UnicornLauncher</span>(<span class="params">apiToken</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.launchedCount = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.launch = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// make a request to the remote api and include the apiToken</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>.launchedCount++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Javascript</span></span><br><span class="line"><span class="keyword">var</span> apiToken = <span class="built_in">require</span>(<span class="string">'../apiToken.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">UnicornLauncher</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.launchedCount = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.launch = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// make a request to the remote api and include the apiToken</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>.launchedCount++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Service/provider in Angular is a solution for a made up problem. Just use CommonJs and you won’t need service/provider thing. You will just use modules and functions that are natural for JS.</p>
<p>Service is a function!</p>
<p><strong>filter vs function</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Angular</span></span><br><span class="line">App.filter(<span class="string">'incr'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> input + <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;div&gt;&#123; &#123;value | incr&#125; &#125;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//React</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incr</span>(<span class="params">input</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> input + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;incr(value)&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
<p>Well, directive is pretty useful if you use html templates as strings. Life is easier with React when you do not use strings for templates.</p>
<p>Filter is a function!</p>
<p><strong>template vs JSX</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Angular</span><br><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ProfilePic</span> <span class="attribute">username</span>=<span class="value">'username'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ProfileLink</span> <span class="attribute">username</span>=<span class="value">'username'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Reactjs</span></span><br><span class="line"><span class="comment">/** @jsx React.DOM */</span></span><br><span class="line"><span class="keyword">var</span> Avatar = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ProfilePic</span> <span class="attribute">username</span>=<span class="value">&#123;this.props.username&#125;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ProfileLink</span> <span class="attribute">username</span>=<span class="value">&#123;this.props.username&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//transformed</span></span><br><span class="line"><span class="keyword">var</span> Avatar = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      div(<span class="literal">null</span>,</span><br><span class="line">        ProfilePic(&#123;username:<span class="keyword">this</span>.props.username&#125;),</span><br><span class="line">        ProfileLink(&#123;username:<span class="keyword">this</span>.props.username&#125;)</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Functions are better than strings. Functions could work with closures. Functions are faster. And in javascript functions are first class citizens. Functions are much more logical than strings.</p>
<p>Template is a function!</p>
<p>With react you can live in function world. And with Angular you live in enterprize patterns world.</p>
<p>My next story will be about why Angular might work for you.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This I hope is the last post about how Angular will bring you to a world of pain.</p>
<ul>
<li><a href="/2014/02/angularjs-is-evil-depend]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[managers are taking your project's breath]]></title>
    <link href="http://eldar.djafarov.com/2014/04/managers-are-taking-your-projects-breath/"/>
    <id>http://eldar.djafarov.com/2014/04/managers-are-taking-your-projects-breath/</id>
    <published>2014-04-22T17:36:36.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>Theoretically there is no manager in agile. If someone is telling you that they have agile team with a manager they are lying. That mostly mean that they are not ready for some reason to share responsibility across the team - they do not have agile.</p>
<p>Few years ago I was lucky to participate in <a href="https://twitter.com/jeffpatton" target="_blank" rel="external">@jeffpatton</a> agile workshop. This had huge impact on my understanding of application development. Right now I had embraced some agile basic principles and consider them as healthier for internal group dynamics of a team. Agile is literally makes healthier and happier each individual in the team.</p>
<p>People are lazy. Developers are not exclusions. We do not like to work and take responsibility. We easily give out our responsibilities for anyone who will take em. And worst thing you can do is to give all responsibility of project’s success to one person. That what is happening when you put manager in your team.</p>
<p>On other hand people tend to step up and take responsibilities on products they are building and when they do they become more engaged and proud by stuff they do. They stop asking stupid questions and start committing themselves to the product.</p>
<p>We are developers and we are coming to our jobs and spend eight hours in a day to do magic. We really want to build something that makes sense, that could make world better. Isn’t that the best motivation for us? Business, please, spend time to share your passion about product with us!</p>
<p>PS: There is only one case when having a project manager is a good idea. When you have short time project and manager who takes BA role. It just do not make sense to commit in building a team.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Theoretically there is no manager in agile. If someone is telling you that they have agile team with a manager they are lying. That mostl]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angularjs is evil: the scope horror]]></title>
    <link href="http://eldar.djafarov.com/2014/04/angularjs-is-evil-the-scope-horror/"/>
    <id>http://eldar.djafarov.com/2014/04/angularjs-is-evil-the-scope-horror/</id>
    <published>2014-04-21T16:04:27.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>This is the second post about how angular makes my life painful.</p>
<ul>
<li><a href="/2014/02/angularjs-is-evil-dependency--injection/">Angularjs is evil: dependency injection</a></li>
<li><a href="/2014/04/angularjs-is-evil-the-scope-horror/">Angularjs is evil: the scope horror</a></li>
<li><a href="/2014/04/angular-is-evil-overengineering/">Angularjs is evil: overengineering hell</a></li>
</ul>
<p>The scope is most one of most complex concepts in Angular. You never know what scope are you in and what is available inside. Things may change if you add anguments somewhere at the top node.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    $scope.value = <span class="string">"foo"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    $scope.value = <span class="string">"bar"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"foo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"bar"</span>&gt;</span></span><br><span class="line">    &#123;value&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>You can miss new <code>ng-controller</code> or someone could overwrite your context. It looks like ok, until you have really complex html.</p>
<p>Things become more infernal when you try to create a directive. Directive may have or may not have the scope. Obviously you are passing the stuff to the scope through arguments of the newly created “element”. You can do it in three different ways with craziest API I ever seen - you got three magic symbols <code>&amp; = @</code> and they do different things with stuff you are throwing inside your arguments. I can only tell that it looks reasonable untill you find <a href="http://facebook.github.io/react/" target="_blank" rel="external">alternative</a> that do same thing and make sense in the same time.</p>
<p>And then you try to do what every angular developer does at least once in his life. You take transclusion and try to put directive scope inside transcluded html. Which looks like a great idea at the beginning.</p>
<p>The other thing that I hate about <code>$scope</code> is that I never know when the template will be rendered. It is quite painful to see the magic without knowing what’s happening. I know that I can learn it, my point though is that if I need to learn to embrace it is probably done in a wrong way.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This is the second post about how angular makes my life painful.</p>
<ul>
<li><a href="/2014/02/angularjs-is-evil-dependency--injection/"]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angularjs is evil: dependency injection]]></title>
    <link href="http://eldar.djafarov.com/2014/02/angularjs-is-evil-dependency-injection/"/>
    <id>http://eldar.djafarov.com/2014/02/angularjs-is-evil-dependency-injection/</id>
    <published>2014-02-17T18:11:02.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>A year ago I was excited of angular and I still think angular is a game changer. I see how community charmed with angular and how easy to start building webapps apps with it. However after a year of using angular I must say that I am not recommending investing time into this framework. I will write several posts about why.</p>
<ul>
<li><a href="/2014/02/angularjs-is-evil-dependency--injection/">Angularjs is evil: dependency injection</a></li>
<li><a href="/2014/04/angularjs-is-evil-the-scope-horror/">Angularjs is evil: the scope horror</a></li>
<li><a href="/2014/04/angular-is-evil-overengineering/">Angularjs is evil: overengineering hell</a></li>
</ul>
<p>One of things I hate most about angular is its module system. Sadly it is deeply injected in its DNA. Someone decided that DI in JavaScript should look like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFactory</span>(<span class="params">stuff</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//use stuff</span></span><br><span class="line">&#125;</span><br><span class="line">someFactory.$inject = [<span class="string">'stuff'</span>];</span><br><span class="line"></span><br><span class="line">app.factory([<span class="string">'stuff'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">stuff</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//use stuff</span></span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure>
<p>It looks cool. But for me as a JS developer it’s too messy and complex (someFactory-&gt;someFactoryProvider o_O WTF?!) Here is a dependency injection in pure JS:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFactory</span>(<span class="params">stuff</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//we're using closure for DI here</span></span><br><span class="line">    	<span class="comment">//use stuff</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">someFactory(stuff) <span class="comment">// injecting stuff</span></span><br></pre></td></tr></table></figure></p>
<p>I am using simple closure for dependency injection. It feels more natural.<br>But we still can’t replace angular’s module system right? Thus we need to use CommonJS (you can use <a href="http://browserify.org/" target="_blank" rel="external">browserify</a> or <a href="http://brunch.io/" target="_blank" rel="external">brunch</a>).<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stuff = <span class="built_in">require</span>(<span class="string">'./stuff'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">someFactory</span>(<span class="params"></span>)</span>&#123; <span class="comment">//and again we use closure</span></span><br><span class="line">	<span class="comment">//use stuff</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Why is that better? It is simple. It is better way for structuring your app - it gives you references and you can directly say where the dependency lives. It already works well for <strong>nodejs</strong>. It is compatible with existing package managers.</p>
<p>I know that how JS modules should look like is a debatable topic. I think that CommonJS pattern quite usable and much better fit for JS than AMD or ES6 modules. Though I definitely think that Angular got it wrong.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>A year ago I was excited of angular and I still think angular is a game changer. I see how community charmed with angular and how easy to]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reactjs mixing with Backbone]]></title>
    <link href="http://eldar.djafarov.com/2013/11/reactjs-mixing-with-backbone/"/>
    <id>http://eldar.djafarov.com/2013/11/reactjs-mixing-with-backbone/</id>
    <published>2013-11-24T05:06:04.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>Reactjs is a javascript librarby for building user interfaces opensourced by facebook just recently.</p>
<p>Not long ago I felt that as a developer I have more or less two best options to build an app. Whether do it in #angular or #backbone. Now I feel that #react is taking best of angular, do it better and allows to use best parts of backbone.</p>
<p>I hate Backbone Views and I hate $scope of angular, especially when it comes to directive scope and all &amp;-@-= stuff. Transclusion and scope is a double hell and I am not talking about digesting and performance yet.</p>
<p>React has really small API and it does one thing, but does it really well. It abstracts DOM for you and optimizes the rendering part. So each time you need react to reflect state changes in the DOM it renders lightweight DOM in javascript and applies only diff to the real DOM. In that way rendering becomes really cheap unlike in angular. And that allows us to build apps with diffenrent patterns in mind.</p>
<p>And here are some tips I got from several weeks of playing around #Reactjs</p>
<h3 id="React_is_just_V">React is just V</h3><p>React needs other stuff like routes and models. I am taking them from Backbone.</p>
<h3 id="Models_are_state">Models are state</h3><p>By default React have single state <code>this.state</code>. Which is not usually best solution. It appears that cleaner way is to have multiple states. Where <code>this.state</code> is not persisting state and backbone models are.</p>
<p>In the React’s example you can find <a href="https://github.com/facebook/react/blob/master/examples/todomvc-backbone/js/app.js#L148" target="_blank" rel="external">BackboneMixin</a> but it has some flaws. Following one is better since it does proper cleanup.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  ModelMixin = &#123;</span><br><span class="line">  componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Whenever there may be a change in the Backbone data, trigger a reconcile.</span></span><br><span class="line">    <span class="keyword">this</span>.getBackboneModels().forEach(<span class="keyword">this</span>.injectModel, <span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Ensure that we clean up any dangling references when the component is</span></span><br><span class="line">    <span class="comment">// destroyed.</span></span><br><span class="line">    <span class="keyword">this</span>.__syncedModels.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">model</span>) </span>&#123;</span><br><span class="line">      model.off(<span class="literal">null</span>, model.__updater, <span class="keyword">this</span>);</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  injectModel: <span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.__syncedModels) <span class="keyword">this</span>.__syncedModels = [];</span><br><span class="line">    <span class="keyword">if</span>(!~<span class="keyword">this</span>.__syncedModels.indexOf(model))&#123;</span><br><span class="line">      <span class="keyword">var</span> updater = <span class="keyword">this</span>.forceUpdate.bind(<span class="keyword">this</span>, <span class="literal">null</span>);</span><br><span class="line">      model.__updater = updater;</span><br><span class="line">      model.on(<span class="string">'add change remove'</span>, updater, <span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">this</span>.__syncedModels.push(model);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In that way you can use same models in several nested components.</p>
<figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;rootComponent <span class="literal">user</span>=<span class="string">"new UserModel(&#123;id: id&#125;)"</span>&gt;</span><br><span class="line">  &lt;contactComponent <span class="literal">user</span> = &#123;this.props.<span class="literal">user</span>&#125;/&gt;</span><br><span class="line">  &lt;userpicComponent <span class="literal">user</span> = &#123;this.props.<span class="literal">user</span>&#125;/&gt;</span><br><span class="line">&lt;/rootComponent&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2_way_binding">2 way binding</h3><p>It’s kinda logical to have 2 way binding with those Backbone models. <a href="https://github.com/facebook/react/tree/master/src/addons/link" target="_blank" rel="external">LinkedState</a> plugin is working only for state thus here is BindMixin wich does basically the same as LinkedState but for Backbone models.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  BindMixin = &#123;</span><br><span class="line">  bindTo: <span class="function"><span class="keyword">function</span>(<span class="params">model, key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: model.get(key),</span><br><span class="line">      requestChange: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">          model.set(key, value);</span><br><span class="line">      &#125;.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This mixin adds bindTo method that binds control with model property as simple as <code>this.bindTo(user, &#39;name&#39;)</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Hello = React.createClass(&#123;</span><br><span class="line">  mixins:[ModelMixin, BindMixin],</span><br><span class="line">  getBackboneModels: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">this</span>.props.instance]</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> model = <span class="keyword">this</span>.props.instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span>&gt;</span>Hello &#123;model.get('initial')&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">valueLink</span>=<span class="value">&#123;this.bindTo(model,</span> '<span class="attribute">initial</span>')&#125;/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span></span><br></pre></td></tr></table></figure>
<p>Here is working example: <a href="http://jsfiddle.net/djkojb/qZf48/24/" target="_blank" rel="external">http://jsfiddle.net/djkojb/qZf48/24/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Reactjs is a javascript librarby for building user interfaces opensourced by facebook just recently.</p>
<p>Not long ago I felt that as a]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[using private components in compy]]></title>
    <link href="http://eldar.djafarov.com/2013/10/using-private-components-in-compy/"/>
    <id>http://eldar.djafarov.com/2013/10/using-private-components-in-compy/</id>
    <published>2013-10-21T14:09:02.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>There are core limitations in component that makes hard to use private git repositories directly, unless you use github. Component FAQ <a href="https://github.com/component/component/wiki/F.A.Q#how-do-i-use-private-github-repositories" target="_blank" rel="external">proposes</a> to use <code>remotes</code> property and any web server that uses the same urls as Github.</p>
<p><em>package.json</em><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "compy":&#123;</span><br><span class="line">    ...</span><br><span class="line">    "remotes":["https://user:pass@raw.github.com"]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>But there is a better way to manage private components with any git server you like.</p>
<h3 id="using_git_submodules_to_manage_private_components">using git submodules to manage private components</h3><p>Component supports <code>local</code> dependencies. That means it can serve components from any local folder you put in as local param in config.</p>
<p><em>package.json</em><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "compy":&#123;</span><br><span class="line">    ...</span><br><span class="line">    "paths":["local"],</span><br><span class="line">    "local":["component1","component2"]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>So if you want to use local dependencies, you should put git <a href="http://git-scm.com/book/en/Git-Tools-Submodules" target="_blank" rel="external">submodules</a> with those private components in the folder.</p>
<p><a href="https://github.com/edjafarov/compy" target="_blank" rel="external">Compy</a> will serve them as usual components and you will manage them with git-cli.</p>
<h3 id="adding_component_to_folder">adding component to folder</h3><p>You can add component to <code>local</code> folder like this:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> local;</span><br><span class="line">submodule <span class="built_in">add</span> gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/chneukirchen/rack.git</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>There are core limitations in component that makes hard to use private git repositories directly, unless you use github. Component FAQ <a]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[socker: websocket CRUD over engine.io]]></title>
    <link href="http://eldar.djafarov.com/2013/10/socker-websocket-crud-over-engineio/"/>
    <id>http://eldar.djafarov.com/2013/10/socker-websocket-crud-over-engineio/</id>
    <published>2013-10-15T01:10:06.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>One of substantial difference of using sockets instead of plain http requests is that we usually broadcast messages without expecting any response. While building <a href="http://github.com/openconf/jschat" target="_blank" rel="external">jschat</a> I thought it would be ehough. Though even for a chat we need the response if we want reliability and better experience. Think of “Pending” state of a message when sending it in offline mode.</p>
<p>Raw libraries doesn’t provide any ‘response’ like functionality thus I had to build my own implementation. As a base for jschat we are using <a href="https://github.com/LearnBoost/engine.io" target="_blank" rel="external">engine.io</a> because <a href="https://github.com/learnboost/socket.io" target="_blank" rel="external">socket.io</a> is not supported for a long time and engine.io is kind of it’s successor and it’s awesome.</p>
<h2 id="socker">socker</h2><p><a href="https://github.com/edjafarov/socker" target="_blank" rel="external">Socker</a> is inspired by <a href="https://github.com/visionmedia/express" target="_blank" rel="external">express</a>. Simple and lightweight implementation of middlewares, routing and error handling. Socker wrapping both engine.io and engine.io-client and providing additional methods that implement express like API.</p>
<h3 id="setting_up_socker">setting up socker</h3><p>We can use engine.io and socker with or without express<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//backend</span></span><br><span class="line"><span class="keyword">var</span> engine = <span class="built_in">require</span>(<span class="string">'engine.io'</span>);</span><br><span class="line"><span class="keyword">var</span> socker = <span class="built_in">require</span>(<span class="string">'socker'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(app);</span><br><span class="line">server.listen(nconf.get(<span class="string">'server:port'</span>));</span><br><span class="line">server = engine.attach(server);</span><br><span class="line"></span><br><span class="line">socker(server); <span class="comment">// wrapping server with additional methods</span></span><br><span class="line">server.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">  socker.attach(socket);<span class="comment">// we are attaching socker to the socket</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// frontend</span></span><br><span class="line"><span class="keyword">var</span> socket = <span class="built_in">require</span>(<span class="string">'engine.io'</span>)(<span class="string">'ws://localhost'</span>);</span><br><span class="line"><span class="keyword">var</span> sockerClient = <span class="built_in">require</span>(<span class="string">'socker-client'</span>); <span class="comment">// we can use it as standalone though</span></span><br><span class="line">sockerClient(socket);</span><br></pre></td></tr></table></figure>
<h3 id="sending_the_message_from_client">sending the message from client</h3><p>On the client we have additional <code>serve</code> method on the socket<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//socket.serve(&lt;optional&gt; route, &lt;optional&gt; message, &lt;required&gt; callback);</span></span><br><span class="line"></span><br><span class="line">socket.serve(&#123;message:<span class="string">"Hello world!"</span>&#125;, <span class="function"><span class="keyword">function</span><span class="params">(err, data)</span></span>&#123;</span><br><span class="line">  <span class="comment">// err contains error object if it was thrown</span></span><br><span class="line">  <span class="comment">// data is a response data</span></span><br><span class="line">&#125;)</span><br><span class="line">socket.serve(<span class="string">'READ /api/item/343'</span>, <span class="function"><span class="keyword">function</span><span class="params">(err, data)</span></span>&#123;</span><br><span class="line">  <span class="comment">// err contains error object if it was thrown</span></span><br><span class="line">  <span class="comment">// data is a response data</span></span><br><span class="line">&#125;)</span><br><span class="line">socket.serve(<span class="string">'CREATE /api/items'</span>, &#123;itemName : <span class="string">"foo"</span>&#125; <span class="function"><span class="keyword">function</span><span class="params">(err, data)</span></span>&#123;</span><br><span class="line">  <span class="comment">// err contains error object if it was thrown</span></span><br><span class="line">  <span class="comment">// data is a response data</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="handling_the_message_on_server">handling the message on server</h3><p>On the server we additionally have sock.use and sock.when methods. <code>sock.use</code> adds middleware handler. Middleware in our case instead of request and response gives socket and data objects.<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server.sock.<span class="keyword">use</span><span class="params">(logger)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span><span class="params">(socket, data, next)</span>&#123;</span></span><br><span class="line">  <span class="comment">// socket is a socket object</span></span><br><span class="line">  <span class="comment">// data - the data object sent with `request`</span></span><br><span class="line">  console.<span class="built_in">log</span><span class="params">(data)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// socket object have .json method to send a response</span></span><br><span class="line">  <span class="keyword">if</span><span class="params">(weNeedTo)</span> return socket.json<span class="params">(&#123;responseMessage: <span class="string">"bar"</span>&#125;)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// or we can throw an error</span></span><br><span class="line">  <span class="keyword">if</span><span class="params">(weNeedToThrowError)</span> return next<span class="params">(<span class="string">"Error message"</span>)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// if we need to pass to next handler</span></span><br><span class="line">  next<span class="params">()</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>socket</code> is a message context object. And you can pollute it whenever you like. The “session” context object is <code>socket.__proto__</code> so If you want to save some data for connection lifetime use prototype object.</p>
<h3 id="handling_routing">handling routing</h3><p>Inside routing middlewares the route is already parsed and we have also socket.params object with all params from the route.<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.sock.when('CREATE /api/items', checkItem, createItem);</span><br><span class="line">server.sock.when('READ /api/item/:id', getItem);</span><br><span class="line">function getItem(socket, data, next)&#123;</span><br><span class="line">  // socket.params<span class="comment">['id']</span> contains id from the route</span><br><span class="line">  // data <span class="keyword">is</span> a data sent</span><br><span class="line">  socket.json(&#123;<span class="keyword">room</span>:<span class="string">"name"</span>, id: 343&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Using the mask <code>METHOD uri</code> is not required for socker. In the same manner you can name your routes.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.sock.when(<span class="string">'Server, please, give me room with :id'</span>, callback);</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">server.sock.when(<span class="string">'Bloody server! I command you to stay on your knees and give all items you got.'</span>, callback);</span><br></pre></td></tr></table></figure></p>
<h3 id="error_handling">error handling</h3><p>We can also customize error handling.<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">server</span><span class="class">.sock</span><span class="class">.use</span>(<span class="function">function</span>(err, socket, data, next)&#123;</span><br><span class="line">  <span class="tag">if</span>(err)&#123;</span><br><span class="line">    <span class="tag">socket</span><span class="class">.json</span>(&#123;<span class="attribute">type</span>:<span class="string">"ERROR"</span>, <span class="attribute">err</span>:err, <span class="attribute">code</span>: <span class="number">500</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>It is important to put <code>type : &quot;ERROR&quot;</code> because that is the way client will treat the message as error.</p>
<h3 id="try_it">try it</h3><p>You got clean and simple API and you got some latency boost. You save roundtrip to your session storage and handshake time. And now with <a href="https://github.com/edjafarov/socker" target="_blank" rel="external">socker</a> moving from express REST API to socket based API is really simple.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>One of substantial difference of using sockets instead of plain http requests is that we usually broadcast messages without expecting any]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[why building another app compiler?]]></title>
    <link href="http://eldar.djafarov.com/2013/09/why-building-another-app-compiller/"/>
    <id>http://eldar.djafarov.com/2013/09/why-building-another-app-compiller/</id>
    <published>2013-09-28T12:10:19.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>When you are frontend developer and start doing node npm completely spoils you. Because unlike we used to it provides single and predictable way of adding/using 3rd party libs and snippets to your code.</p>
<p>Frontend is more complex in many ways. It is more fragmented since there are html and css additionally to javascript and our code is running in different combinations of vm’s and platforms.</p>
<p>Commonly used way of adding 3rd libs is a <code>/vendor</code> folder that holds bunch of unminified (if you’re lucky enough) files that were downloaded by someone ages ago. Maybe you will find comments inside that will give you an idea of what version of library is used, maybe not. Also what-load-first dependency management is completely your pain. You might have a master file with all the scripts loaded in ‘right’ order <img width="15" height="15" src="http://skypeblogs.files.wordpress.com/2011/07/0186-facepalm-30px.png?w=30&h=30">.</p>
<p><a href="https://github.com/bower/bower" target="_blank" rel="external"><strong>Bower</strong></a> is doing great job adding more metadata to packages fixing some problemts. But <em>Bower is just a package manager (c)</em> and it doesnt load scripts. So again, you need to do additional job defining what-load-when relations.</p>
<p>Even if you will use <a href="https://github.com/jrburke/requirejs" target="_blank" rel="external"><strong>require.js</strong></a> you need to configure 3rd libraries. Besides <strong>requirejs</strong> adds it’s own complexities into code. For example: do you know the difference between <code>require</code> and <code>define</code> functions? And frankly why do you need to know difference! You need something that just works.</p>
<p>So at the end of a day we need package manager that will deliver libs into our app, require functionality that will handle script dependencies and builder that will wire all the thing together and give back 3 files: index.html, app.js and app.css</p>
<h3 id="and_compy_can_do_it">and <a href="https://github.com/edjafarov/compy" target="_blank" rel="external">compy</a> can do it</h3><p><a href="https://github.com/component/component" target="_blank" rel="external"><strong>Componentjs</strong></a> does most of work already. <strong>Compy</strong> just wraps the concept in one solid solution.</p>
<h4 id="component_package_manager"><strong>component package manager</strong></h4><p><strong>Componentjs</strong> was obvious choice. Unlike <strong>npm</strong> or <strong>bower</strong> component is really strict on what files considered a source. Which is not that important for server but really important for frontend.</p>
<h4 id="local_require"><strong>local require</strong></h4><p><strong>Componentjs</strong> gives local require out of the box. Component’s require is synchronous. Your files are wrapped in scope and concatenated in one file. Your dependencies are already loaded then you require them. Thus you don’t break javascript and require becomes plain simple and clear.</p>
<h4 id="builder"><strong>builder</strong></h4><p>Builder takes responsibility to compile out three files: app.js, app.css and index.html. app.js is built of js dependencies (components), precompiled templates and js source files. app.css is just concatenated css files and index.html generated automatically to eat js/css and run “main” file. Builder have bunch of plugins that allow to precompile sources. So you can use coffeescript, scss, jade, whatever. And just technically because we avoid on read/write cycle comparing to plain grunt it’s faster than grunt. And you can use mix of technologies require coffeescript from js and vice versa.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>When you are frontend developer and start doing node npm completely spoils you. Because unlike we used to it provides single and predicta]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[compy - simple way of building webapps]]></title>
    <link href="http://eldar.djafarov.com/2013/08/compy-simple-way-of-building-webapps/"/>
    <id>http://eldar.djafarov.com/2013/08/compy-simple-way-of-building-webapps/</id>
    <published>2013-08-08T00:26:05.000Z</published>
    <updated>2015-07-05T08:28:28.000Z</updated>
    <content type="html"><![CDATA[<p><strong>Compy</strong> is a simple, ‘zero’ configuration web app builder/compiller integrated with client package manager <a href="https://github.com/component/component" target="_blank" rel="external">component</a>.<br>Although there is almost no configuration it gives you all flexibility to code the way you like.</p>
<h3 id="Start">Start</h3><p>Install compy with <code>npm</code> :<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install compy -g</span><br></pre></td></tr></table></figure></p>
<p>To start an app all you need is to tell <strong>compy</strong> where is the beginning. To do that you need <code>package.json</code> file with <code>compy.main</code> property pointing to main js file of your app.<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">name</span>" : <span class="value"><span class="string">"app"</span></span>,</span><br><span class="line">  "<span class="attribute">compy</span>" : <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">main</span>" : <span class="value"><span class="string">"appstart.js"</span></span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>appstart.js</code> file will be executed right after the page load.</p>
<p>To compile app, just run <code>$compy compile</code></p>
<p><strong>Compy</strong> will generate <code>./dist</code> folder with <em>app.js</em>, <em>app.css</em> and <a href="https://github.com/edjafarov/compy/blob/master/index.html" target="_blank" rel="external"><em>index.html</em></a>. All css in your directory will be concatenated/minified into <em>app.css</em> file.</p>
<p>Compy have static server so you can check the result with<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ compy server [watch]</span><br></pre></td></tr></table></figure></p>
<p>adding <em>watch</em> option will recompile the app and livereload the changes in a browser.</p>
<h3 id="Components">Components</h3><p>Most powerful part of compy local require and integration with <a href="https://github.com/component/component" target="_blank" rel="external">component</a>.</p>
<p>To install jquery:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ compy install jquerycomp/jquery</span><br></pre></td></tr></table></figure></p>
<p>to use jquery in code:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">$(<span class="built_in">document</span>.body).html(<span class="string">"Hallo world"</span>);</span><br></pre></td></tr></table></figure></p>
<p>Local require will work the same as in node.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filename: add.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filename: appstart.js</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'./add'</span>);</span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>); <span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<h3 id="Plugins">Plugins</h3><p><strong>compy</strong> support <a href="https://github.com/component/component" target="_blank" rel="external">component</a>‘s plugins.</p>
<ul>
<li><a href="https://github.com/rschmukler/component-stylus-plugin" target="_blank" rel="external">rschmukler/component-stylus-plugin</a> — precompile stylus</li>
<li><a href="https://github.com/segmentio/component-jade" target="_blank" rel="external">segmentio/component-jade</a> — precompile jade templates</li>
<li><a href="https://github.com/anthonyshort/component-coffee" target="_blank" rel="external">anthonyshort/component-coffee</a> - require CoffeeScript files as scripts</li>
<li><a href="https://github.com/anthonyshort/component-sass" target="_blank" rel="external">anthonyshort/component-sass</a> - compile Sass files using node-sass</li>
<li><a href="https://github.com/kewah/component-builder-handlebars" target="_blank" rel="external">kewah/component-builder-handlebars</a> - precompile Handlebars templates</li>
<li><a href="https://github.com/ericgj/component-hogan" target="_blank" rel="external">ericgj/component-hogan</a> - Mustache transpiler for component (using Hogan)</li>
<li><a href="https://github.com/segmentio/component-sass" target="_blank" rel="external">segmentio/component-sass</a> — Sass transpiler for component</li>
<li><a href="https://github.com/segmentio/component-json" target="_blank" rel="external">segmentio/component-json</a> — Require JSON files as Javascript.</li>
<li><a href="https://github.com/queckezz/component-roole" target="_blank" rel="external">queckezz/component-roole</a> — Compile <a href="http://roole.org" target="_blank" rel="external">Roole</a> files</li>
<li><a href="https://github.com/Wizcorp/component-less" target="_blank" rel="external">Wizcorp/component-less</a> - <a href="https://github.com/less/less.js" target="_blank" rel="external">LESS</a> transpiler for component-builder</li>
<li><a href="https://github.com/segmentio/component-markdown" target="_blank" rel="external">segmentio/component-markdown</a> - Compile Markdown templates and make them available as Javascript strings.</li>
</ul>
<p>Given that you can use those to work with language/template you want.<br>For example to use coffeescript you will need to install plugin in your root folder.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install component-coffee</span><br></pre></td></tr></table></figure></p>
<p>Now after recompilation all your coffee files will be used as javascript. That also means you can use both js and coffee files in same repo.</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#filename: add.coffee</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">(a, b)</span> =&gt;</span></span><br><span class="line">  a + b</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filename: appstart.js</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'./add'</span>);</span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>); <span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<h3 id="And_there_is_more">And there is more</h3><p><strong>Compy</strong> is built ontop of grunt. Basically it is just <a href="https://github.com/edjafarov/compy/blob/master/Gruntfile.js" target="_blank" rel="external">grunt</a> setup. So no magic here. Though lots of stuff available:</p>
<ul>
<li>components support</li>
<li>local <code>require</code></li>
<li>supporting coffeescript, sass, jade and other <a href="#plugins">plugins</a></li>
<li>static server + livereload</li>
<li>karma runner</li>
<li>grunt extendable</li>
</ul>
<p>May the <a href="https://github.com/edjafarov/compy/" target="_blank" rel="external">force</a> be with you!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>Compy</strong> is a simple, ‘zero’ configuration web app builder/compiller integrated with client package manager <a href="https:]]>
    </summary>
    
  </entry>
  
</feed>